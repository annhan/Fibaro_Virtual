{"name":"SonosPlay file","type":"virtual_device","properties":{"deviceIcon":0,"currentIcon":"0","log":"","logTemp":"","mainLoop":"","visible":"true","rows":[{"type":"button","elements":[{"id":1,"lua":true,"waitForResponse":false,"caption":"Play File","name":"Button11","empty":false,"msg":"-------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------\n-- SONOS Play stream...\n-- Copyright © 2014 Jean-Christophe Vermandé\n-------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------\n\nselfId = fibaro:getSelfId();\nip = fibaro:get(selfId, 'IPAddress');\nport = fibaro:get(selfId, 'TCPPort') or 1400;\ncurrentTransportState = \"\";\nlastTransportState = \"\";\ncurrentVolume = 0;\nlastVolume = 0;\nttsVolumeIsDifferent = false;\n\nurlencode = function(str)\n  if (str) then\n    str = string.gsub (str, \"\\n\", \"\\r\\n\");\n    str = string.gsub (str, \"([^%w ])\", function (c) return string.format (\"%%%02X\", string.byte(c)) end);\n    str = string.gsub (str, \" \", \"+\");\n  end\n  return str;\nend\n\ncreateRequestBody = function(action, schema, data)\n  return string.format(\"<u:%s xmlns:u=\\\"%s\\\">%s</u:%s>\", action, schema, data, action);\nend\n\nreponseCallback = function(fnc, args)\n  if (fnc == nil) then\n    return nil;\n  end\n  return fnc(args);\nend\n\ncreateSocket = function()\n  -- Check IP and PORT before\n  if (ip == nil or port == nil) then\n    fibaro:debug(\"You must configure IPAddress and TCPPort first\");\n    return;\n  end\n  local socket;\n  local status, err = pcall(function()\n      socket = Net.FTcpSocket(ip, port);\n      socket:setReadTimeout(1000);\n    end);\n  if (status ~= nil and status ~= true) then\n    fibaro:debug(\"socket status: \" .. tostring(status or ''));\n  end\n  if (err ~= nil) then\n    fibaro:debug(\"socket err: \" .. tostring(err or ''));\n    return;\n  end\n  return socket;\nend\n\ndisposeSocket = function(socket)\n  if (socket ~= nil) then\n    socket:disconnect();\n    socket = nil;\n    return true;\n  end\n  return false;\nend\n\nsendSoapMessage = function(url, service, action, args, callback, retry)\n  \n  local socket = createSocket();\n  if (socket == nil) then\n    return;\n  end\n  retry = retry or 0\n  -- prepare data\n  local url = \"POST \" .. url .. \" HTTP/1.1\";\n  local soapaction = \"SOAPACTION: \\\"\" .. service .. \"#\" .. action.name .. \"\\\"\";\n  local body = createRequestBody(action.name, action.service, tostring(args or \"\"));\n  local envelope = \"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?><s:Envelope xmlns:s=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\" s:encodingStyle=\\\"http://schemas.xmlsoap.org/soap/encoding/\\\"><s:Body>\" .. body .. \"</s:Body></s:Envelope>\";\n  local ctl = \"Content-Length: \" .. string.len(envelope);\n  local payload = url .. \"\\r\\n\" .. ctl .. \"\\r\\n\" .. soapaction .. \"\\r\\n\" .. \"\\r\\n\" .. envelope;\n  -- write data\n  local bytes, errorcode = socket:write(payload);\n  if (errorcode == 0) then\n    local state, errorcode = socket:read();\n    if (errorcode == 0) then\n      if (string.len(state or \"\") > 0) then\n        -- callback\n        if (callback ~= nil) then\n          reponseCallback(callback, state);\n        end\n        -- dispose ...\n        disposeSocket(socket);\n        return true;\n      else\n        fibaro:debug(\"Error: Invalid response. response length: \" .. string.len(state or \"\"));\n      end\n    else\n      if (retry < 5) then\n        fibaro:debug(\"retry #\"..retry..\" action: \" .. action.name);\n        return sendSoapMessage(url, service, action, args, callback, (retry + 1));\n      else\n        fibaro:debug(\"Error: Code returned \"..tostring(errorcode or \"\"));\n      end\n    end\n  elseif (errorcode == 2) then\n    fibaro:debug(\"Error: You must check your IP and PORT settings.\");\n  else\n    if (retry < 5) then\n      fibaro:debug(\"retry #\"..retry..\" action: \" .. action.name);\n      return sendSoapMessage(url, service, action, args, callback, (retry + 1));\n    else\n      fibaro:debug(\"Error: Code returned \"..tostring(errorcode or \"\"));\n    end\n  end\n  -- dispose ...\n  disposeSocket(socket);\n  -- default response\n  return false;\nend\n\nstop = function()\n  return sendSoapMessage(\n    -- control url\n    \"/MediaRenderer/AVTransport/Control\",\n    -- service type\n    \"urn:schemas-upnp-org:service:AVTransport:1\",\n    -- action\n    { name = \"Stop\", service = \"urn:schemas-upnp-org:service:AVTransport:1\" },\n    -- soap body data (options)\n    \"<InstanceID>0</InstanceID><Speed>1</Speed>\",\n    -- callback (options)\n    function(response)\n      fibaro:debug(\"stop sent\");\n    end);\nend\n\nunMute = function()\n  return sendSoapMessage(\n    -- control url\n    \"/MediaRenderer/RenderingControl/Control\",\n    -- service type\n    \"urn:schemas-upnp-org:service:RenderingControl:1\",\n    -- action\n    { name = \"SetMute\", service = \"urn:schemas-upnp-org:service:RenderingControl:1\" },\n    -- soap body data (options)\n    \"<InstanceID>0</InstanceID><Channel>Master</Channel><DesiredMute>0</DesiredMute>\",\n    -- callback (options)\n    function(response)\n      fibaro:debug(\"unMute sent\");\n    end);\nend\n\nplay = function(duration)\n  return sendSoapMessage(\n    -- control url\n    \"/MediaRenderer/AVTransport/Control\",\n    -- service type\n    \"urn:schemas-upnp-org:service:AVTransport:1\",\n    -- action\n    { name = \"Play\", service = \"urn:schemas-upnp-org:service:AVTransport:1\" },\n    -- soap body data (options)\n    \"<InstanceID>0</InstanceID><Speed>1</Speed>\",\n    -- callback (options)\n    function(response)\n      if (duration ~= nil) then\n        fibaro:debug(\"play sent for \" .. duration .. \" seconds\");\n        fibaro:sleep(duration);\n        stop();\n      else\n        fibaro:debug(\"play sent\");\n        local n = 0;\n        currentTransportState = \"TRANSITIONING\";\n        while (currentTransportState == \"TRANSITIONING\") do\n          if (n > 10) then break end;\n          getTransportState();\n          fibaro:debug(currentTransportState);\n          fibaro:sleep(5000);\n          n = n + 1;\n        end\n        local i = 0;\n        currentTransportState = \"PLAYING\";\n        while (currentTransportState == \"PLAYING\") do\n          if (i > 10) then break end;\n          getTransportState();\n          fibaro:debug(currentTransportState);\n          fibaro:sleep(2000);\n          i = i + 1;\n        end\n        fibaro:sleep(1000);\n        stop();\n      end\n      -- update volume with value before tts if different\n      if (ttsVolumeIsDifferent == true) then\n        setVolume(lastVolume);\n        ttsVolumeIsDifferent = false;\n      end\n    end);\nend\n\nsetVolume = function(value)\n  return sendSoapMessage(\n    -- control url\n    \"/MediaRenderer/RenderingControl/Control\",\n    -- service type\n    \"urn:schemas-upnp-org:service:RenderingControl:1\",\n    -- action\n    { name = \"SetVolume\", service = \"urn:schemas-upnp-org:service:RenderingControl:1\" },\n    -- soap body data (options)\n    \"<InstanceID>0</InstanceID><Channel>Master</Channel><DesiredVolume>\" .. tostring(value) .. \"</DesiredVolume>\",\n    -- callback (options)\n    function(response)\n      fibaro:debug(\"Volume set: \" .. value);\n    end);\nend\n\ngetVolume = function()\n  fibaro:log(\"Get volume, please wait...\");\n  return sendSoapMessage(\n    -- control url\n    \"/MediaRenderer/RenderingControl/Control\",\n    -- service type\n    \"urn:schemas-upnp-org:service:AVTransport:1\",\n    -- action\n    { name = \"GetVolume\", service = \"urn:schemas-upnp-org:service:RenderingControl:1\" },\n    -- soap body data (options)\n    \"<InstanceID>0</InstanceID><Channel>Master</Channel>\",\n    -- callback (options)\n    function(response)\n      currentVolume = tonumber(response:match(\"<CurrentVolume>(.+)</CurrentVolume>\") or 0);\n    end);\nend\n\ngetTransportState = function()\n  return sendSoapMessage(\n    -- control url\n    \"/MediaRenderer/AVTransport/Control\",\n    -- service type\n    \"urn:schemas-upnp-org:service:AVTransport:1\",\n    -- action\n    { name = \"GetTransportInfo\", service = \"urn:schemas-upnp-org:service:AVTransport:1\" },\n    -- soap body data (options)\n    \"<InstanceID>0</InstanceID>\",\n    -- callback (options)\n    function(response)\n      currentTransportState = response:match(\"<CurrentTransportState>(.+)</CurrentTransportState>\") or \"\";\n    end);\nend\n\nplayFile= function(file, volume)\n  return sendSoapMessage(\n    -- control url\n    \"/MediaRenderer/AVTransport/Control\",\n    -- service type\n    \"urn:schemas-upnp-org:service:AVTransport:1\",\n    -- action\n    { name = \"SetAVTransportURI\", service = \"urn:schemas-upnp-org:service:AVTransport:1\" },\n    -- soap body data (options)\n    \"<InstanceID>0</InstanceID>,<CurrentURI>x-file-cifs:\" .. file .. \"</CurrentURI>,<CurrentURIMetaData></CurrentURIMetaData>\",\n    -- callback (options)\n    function(response)\n      -- retrieve current transport state\n      getTransportState();\n      lastTransportState = currentTransportState;\n      -- unmute before\n      unMute();\n      -- retrieve volume\n      getVolume();\n      lastVolume = currentVolume;\n      -- set tts volume if <> with current\n      if (volume ~= nil and volume ~= currentVolume) then\n        setVolume(volume);\n        ttsVolumeIsDifferent = true;\n      end\n      \n      play();\n      \n    end);\nend\n\n-- parameters: the file, the volume\nplayFile(\"//HOME-SERVER/Musique/CD/Dream Theater/A Change of Seasons/01-A Change of Seasons [Medley].flac\", 20); ","buttonIcon":0,"favourite":false,"main":true}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}